const API_KEY = 'io-v2-eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvd25lciI6IjBmYjkxMjcwLTUyYzQtNDE2MC04MGQ0LWE1MzhiMDg3ZTRlMiIsImV4cCI6NDg5OTQyOTg2N30.YWAktTw6JftNrLbV32jiBWdUvlASrJdcY6SPnSqPqPHcNjT3wF93ETY_uMiTq1UvR2JQgquJFlrfdOlR2fkaeQ';
const API_URL = 'https://api.intelligence.io.solutions/api/v1/chat/completions';
const CHAT_STORAGE_KEY = 'chatHistory';

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
const languagePatterns = {
    python: /(^print\b|def\b|import\b)/,
    javascript: /(function\b|=>|console\.log\b)/,
    java: /(public\s+class|System\.out\.println\b)/,
    csharp: /(using\b|Console\.WriteLine\b)/,
    php: /(<\?php|echo\b)/,
    sql: /(SELECT\b|FROM\b|WHERE\b)/,
    bash: /(^#!\/bin\/bash|sudo\b)/,
    html: /(<html\b|<!DOCTYPE html>)/,
    css: /({|}|:)/,
    cpp: /(include\s+<iostream>|std::)/,
};

function detectLanguage(code) {
    for (const [lang, pattern] of Object.entries(languagePatterns)) {
        if (pattern.test(code)) {
            return lang;
        }
    }
    return 'none';
}

// –î–æ–±–∞–≤–∏–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏
let isChatCleared = false;

async function sendMessage() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
    isChatCleared = false;

    const input = document.getElementById('user-input');
    const modelSelect = document.getElementById('model-select');

    const message = input.value.trim();
    if (!message) return;

    input.style.height = 'auto';
    addMessage('user', message);
    input.value = '';

    try {
        const loadingMsg = addMessage('bot', '<div class="thinking-message">–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...</div>');

        const requestBody = {
            model: modelSelect.value,
            messages: [
                {
                    role: "system",
                    content: `–¢—ã senior-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown: —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, —Å–ø–∏—Å–∫–∞–º–∏, —Ç–∞–±–ª–∏—Ü–∞–º–∏, –≤—Å—Ç–∞–≤–∫–∞–º–∏ –∫–æ–¥–∞ –∏ —Ç.–¥.`
                },
                {
                    role: "user",
                    content: message
                }
            ],
            temperature: 0.7,
            max_tokens: 1500,
            stream: false
        };

        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∑–∞–ø—Ä–æ—Å:', JSON.stringify(requestBody, null, 2));

        const response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${API_KEY}`
            },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} - ${JSON.stringify(errorData)}`);
        }

        const data = await response.json();
        loadingMsg.remove();

        console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:', JSON.stringify(data, null, 2));

        if (data.choices?.[0]?.message?.content) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –æ—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è
            if (!isChatCleared) {
                const formattedResponse = formatResponse(data.choices[0].message.content);
                addMessage('bot', formattedResponse);
            }
        } else if (isChatCleared) {
            addMessage('bot', '<div class="thinking-message">‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω (—á–∞—Ç –±—ã–ª –æ—á–∏—â–µ–Ω)</div>');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        addMessage('bot', `<div class="thinking-message">üö® –û—à–∏–±–∫–∞: ${error.message}</div>`);
    }
}

function formatResponse(markdownText) {
    const html = marked.parse(markdownText);
    const wrapper = document.createElement('div');
    wrapper.innerHTML = html;
    wrapper.querySelectorAll('pre code').forEach(block => {
        const code = block.textContent;
        const container = document.createElement('div');
        container.className = 'code-block';
        const btn = document.createElement('button');
        btn.className = 'copy-button';
        btn.textContent = '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å';
        btn.addEventListener('click', () => {
            navigator.clipboard.writeText(code).then(() => {
                btn.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                setTimeout(() => btn.textContent = '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 2000);
            });
        });
        container.appendChild(btn);
        container.appendChild(block.parentNode.cloneNode(true));
        block.parentNode.replaceWith(container);
        Prism.highlightElement(container.querySelector('code'));
    });
    const timestamp = document.createElement('div');
    timestamp.className = 'timestamp';
    timestamp.textContent = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    wrapper.appendChild(timestamp);
    return wrapper.innerHTML;
}

function addMessage(sender, content) {
    const chatBox = document.getElementById('chat-box');
    const msgDiv = document.createElement('div');
    msgDiv.className = `message ${sender}-message`;
    msgDiv.innerHTML = content;
    msgDiv.querySelectorAll('.copy-button').forEach(button => {
        button.addEventListener('click', () => {
            const code = button.nextElementSibling.textContent;
            navigator.clipboard.writeText(code).then(() => {
                button.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                setTimeout(() => button.textContent = '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 2000);
            });
        });
    });
    chatBox.appendChild(msgDiv);
    chatBox.scrollTop = chatBox.scrollHeight;
    Prism.highlightAllUnder(msgDiv);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    saveChat();
    
    return msgDiv;
}

// –û–±–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter
const inputEl = document.getElementById('user-input');
inputEl.addEventListener('keypress', e => {
    if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); sendMessage(); }
});
inputEl.addEventListener('keydown', e => {
    if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); sendMessage(); }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Prism
Prism.plugins.autoloader.languages_path = 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/';
Prism.highlightAll();

function clearAll() {
    const notification = document.getElementById('checkmark-notification');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notification.classList.remove('hidden');
    notification.classList.add('show');
    
    // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.classList.remove('show');
        notification.classList.add('hidden');
    }, 2000);
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
    const chatBox = document.getElementById('chat-box');
    const messages = chatBox.querySelectorAll('.message');
    
    messages.forEach(message => {
        if (!message.textContent.includes('–ü—Ä–∏–≤–µ—Ç! üëã')) {
            message.remove();
        }
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—á–∏—Å—Ç–∫–∏
    isChatCleared = true;
    
    // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ localStorage
    localStorage.removeItem(CHAT_STORAGE_KEY);
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
    chatBox.scrollTop = chatBox.scrollHeight;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞
function saveChat() {
    const chatBox = document.getElementById('chat-box');
    localStorage.setItem(CHAT_STORAGE_KEY, chatBox.innerHTML);
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞
function loadChat() {
    const chatBox = document.getElementById('chat-box');
    const savedChat = localStorage.getItem(CHAT_STORAGE_KEY);
    
    if (savedChat) {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = savedChat;
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
        const messages = tempDiv.querySelectorAll('.message:not(:first-child)');
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if (messages.length > 0) {
            chatBox.innerHTML = savedChat;
            Prism.highlightAll();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const lastMessage = chatBox.lastElementChild;
            const isLastMessageRestored = lastMessage && 
                lastMessage.textContent.includes('–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
            
            // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
            if (!isLastMessageRestored) {
                addMessage('bot', '<div class="thinking-message">–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</div>');
            }
        }
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', loadChat);

const examplesContainer = document.getElementById('examples-container');

function checkExamplesVisibility() {
    const chatBox = document.getElementById('chat-box');
    const messages = chatBox.querySelectorAll('.message');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    examplesContainer.classList.toggle('hidden', messages.length > 1);
}

function insertExample(text) {
    const input = document.getElementById('user-input');
    input.value = text;
    input.focus();
    checkExamplesVisibility();
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
window.addEventListener('load', checkExamplesVisibility);
document.getElementById('chat-box').addEventListener('DOMNodeInserted', checkExamplesVisibility);

const MAX_CHARS = 1000;
const charCounter = document.getElementById('char-counter');
const userInput = document.getElementById('user-input');

function updateCharCounter() {
    const length = userInput.value.length;
    charCounter.textContent = `${length}/${MAX_CHARS}`;
    
    // –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤
    if (length > MAX_CHARS) {
        charCounter.classList.add('error');
        charCounter.classList.remove('warning');
    } else if (length > MAX_CHARS * 0.8) {
        charCounter.classList.add('warning');
        charCounter.classList.remove('error');
    } else {
        charCounter.classList.remove('warning', 'error');
    }
}

userInput.addEventListener('input', updateCharCounter);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
updateCharCounter();